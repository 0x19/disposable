// Code generated by protoc-gen-go.
// source: protos/service.proto
// DO NOT EDIT!

package disposable

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DisposableRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *DisposableRequest) Reset()                    { *m = DisposableRequest{} }
func (m *DisposableRequest) String() string            { return proto.CompactTextString(m) }
func (*DisposableRequest) ProtoMessage()               {}
func (*DisposableRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type DisposableResponse struct {
	Status    bool   `protobuf:"varint,1,opt,name=status" json:"status"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Error     *Error `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *DisposableResponse) Reset()                    { *m = DisposableResponse{} }
func (m *DisposableResponse) String() string            { return proto.CompactTextString(m) }
func (*DisposableResponse) ProtoMessage()               {}
func (*DisposableResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DisposableResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*DisposableRequest)(nil), "disposable.DisposableRequest")
	proto.RegisterType((*DisposableResponse)(nil), "disposable.DisposableResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DisposableService service

type DisposableServiceClient interface {
	Verify(ctx context.Context, in *DisposableRequest, opts ...grpc.CallOption) (*DisposableResponse, error)
}

type disposableServiceClient struct {
	cc *grpc.ClientConn
}

func NewDisposableServiceClient(cc *grpc.ClientConn) DisposableServiceClient {
	return &disposableServiceClient{cc}
}

func (c *disposableServiceClient) Verify(ctx context.Context, in *DisposableRequest, opts ...grpc.CallOption) (*DisposableResponse, error) {
	out := new(DisposableResponse)
	err := grpc.Invoke(ctx, "/disposable.DisposableService/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DisposableService service

type DisposableServiceServer interface {
	Verify(context.Context, *DisposableRequest) (*DisposableResponse, error)
}

func RegisterDisposableServiceServer(s *grpc.Server, srv DisposableServiceServer) {
	s.RegisterService(&_DisposableService_serviceDesc, srv)
}

func _DisposableService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisposableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisposableServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disposable.DisposableService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisposableServiceServer).Verify(ctx, req.(*DisposableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DisposableService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "disposable.DisposableService",
	HandlerType: (*DisposableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _DisposableService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}

func init() { proto.RegisterFile("protos/service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x73, 0x85, 0xb8, 0x52,
	0x32, 0x8b, 0x0b, 0xf2, 0x8b, 0x13, 0x93, 0x72, 0x52, 0xa5, 0x84, 0xa1, 0x2a, 0x52, 0x8b, 0x8a,
	0xf2, 0x8b, 0x8a, 0x21, 0x0a, 0x94, 0x34, 0xb9, 0x04, 0x5d, 0xe0, 0x4a, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x53, 0x73, 0x13, 0x33, 0x73, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x20, 0x1c, 0xa5, 0x12, 0x2e, 0x21, 0x64, 0xa5, 0x40, 0x56, 0x5e, 0x71, 0xaa,
	0x90, 0x18, 0x17, 0x5b, 0x71, 0x49, 0x62, 0x49, 0x69, 0x31, 0x58, 0x31, 0x47, 0x10, 0x94, 0x27,
	0x24, 0xcb, 0xc5, 0x55, 0x04, 0x31, 0x2e, 0x3e, 0x33, 0x45, 0x82, 0x09, 0x6c, 0x10, 0x27, 0x54,
	0xc4, 0x33, 0x45, 0x48, 0x1d, 0x68, 0x05, 0xc8, 0x1d, 0x12, 0xcc, 0x40, 0x19, 0x6e, 0x23, 0x41,
	0x3d, 0x84, 0x43, 0xf5, 0x5c, 0x41, 0x12, 0x41, 0x10, 0x79, 0xa3, 0x38, 0x64, 0x07, 0x06, 0x43,
	0x3c, 0x27, 0xe4, 0xc9, 0xc5, 0x16, 0x96, 0x5a, 0x94, 0x99, 0x56, 0x29, 0x24, 0x8b, 0xac, 0x11,
	0xc3, 0x27, 0x52, 0x72, 0xb8, 0xa4, 0x21, 0xae, 0x57, 0x62, 0x70, 0x32, 0xe5, 0x92, 0x32, 0xa8,
	0x30, 0xb4, 0xd4, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0x45, 0xd2, 0x12,
	0x85, 0x14, 0x7e, 0x8b, 0x98, 0xb8, 0x10, 0x06, 0x24, 0xb1, 0x81, 0x83, 0xcf, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xe8, 0xac, 0xa8, 0x9a, 0x77, 0x01, 0x00, 0x00,
}
